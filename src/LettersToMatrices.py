"""
Dictionaries for converting characters into cell activation maps for the TI-84+ graph fonts.

Author: T. Bauwens
Date: 2020-09-12
"""
# ToDo:
#     - Digits
#     - Other characters
# Constants
UPPER_MATRICES = {
    "A": [[0, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 1, 1, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1]],
    "B": [[1, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 1, 1, 0]],
    "C": [[0, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 1],
          [0, 1, 1, 1, 0]],
    "D": [[1, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 1, 1, 0]],
    "E": [[1, 1, 1, 1, 1],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 1, 1, 1, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 1, 1, 1, 1]],
    "F": [[1, 1, 1, 1, 1],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 1, 1, 1, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0]],
    "G": [[0, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 0],
          [1, 0, 1, 1, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [0, 1, 1, 1, 1]],
    "H": [[1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 1, 1, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1]],
    "I": [[0, 1, 1, 1, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 1, 1, 1, 0]],
    "J": [[0, 0, 1, 1, 1],
          [0, 0, 0, 1, 0],
          [0, 0, 0, 1, 0],
          [0, 0, 0, 1, 0],
          [0, 0, 0, 1, 0],
          [1, 0, 0, 1, 0],
          [0, 1, 1, 0, 0]],
    "K": [[1, 0, 0, 0, 1],
          [1, 0, 0, 1, 0],
          [1, 0, 1, 0, 0],
          [1, 1, 0, 0, 0],
          [1, 0, 1, 0, 0],
          [1, 0, 0, 1, 0],
          [1, 0, 0, 0, 1]],
    "L": [[1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 1, 1, 1, 1]],
    "M": [[1, 0, 0, 0, 1],
          [1, 1, 0, 1, 1],
          [1, 0, 1, 0, 1],
          [1, 0, 1, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1]],
    "N": [[1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 0, 0, 1],
          [1, 0, 1, 0, 1],
          [1, 0, 0, 1, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1]],
    "O": [[0, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [0, 1, 1, 1, 0]],
    "P": [[1, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 1, 1, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0]],
    "Q": [[0, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 1, 0, 1],
          [1, 0, 0, 1, 0],
          [0, 1, 1, 0, 1]],
    "R": [[1, 1, 1, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 1, 1, 1, 0],
          [1, 0, 1, 0, 0],
          [1, 0, 0, 1, 0],
          [1, 0, 0, 0, 1]],
    "S": [[0, 1, 1, 1, 1],
          [1, 0, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [0, 1, 1, 1, 0],
          [0, 0, 0, 0, 1],
          [0, 0, 0, 0, 1],
          [1, 1, 1, 1, 0]],
    "T": [[1, 1, 1, 1, 1],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0]],
    "U": [[1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [0, 1, 1, 1, 0]],
    "V": [[1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [0, 1, 0, 1, 0],
          [0, 1, 0, 1, 0],
          [0, 0, 1, 0, 0]],
    "W": [[1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 1, 0, 1],
          [1, 0, 1, 0, 1],
          [0, 1, 0, 1, 0]],
    "X": [[1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [0, 1, 0, 1, 0],
          [0, 0, 1, 0, 0],
          [0, 1, 0, 1, 0],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1]],
    "Y": [[1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [1, 0, 0, 0, 1],
          [0, 1, 0, 1, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0]],
    "Z": [[1, 1, 1, 1, 1],
          [0, 0, 0, 0, 1],
          [0, 0, 0, 1, 0],
          [0, 0, 1, 0, 0],
          [0, 1, 0, 0, 0],
          [1, 0, 0, 0, 0],
          [1, 1, 1, 1, 1]],
    " ": [[0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0]],
}

LOWER_MATRICES = {
    "a": [[0, 1, 0],
          [1, 0, 1],
          [1, 1, 1],
          [1, 0, 1],
          [1, 0, 1]],
    "b": [[1, 1, 0],
          [1, 0, 1],
          [1, 1, 0],
          [1, 0, 1],
          [1, 1, 0]],
    "c": [[0, 1, 1],
          [1, 0, 0],
          [1, 0, 0],
          [1, 0, 0],
          [0, 1, 1]],
    "d": [[1, 1, 0],
          [1, 0, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 1, 0]],
    "e": [[1, 1, 1],
          [1, 0, 0],
          [1, 1, 0],
          [1, 0, 0],
          [1, 1, 1]],
    "f": [[1, 1, 1],
          [1, 0, 0],
          [1, 1, 0],
          [1, 0, 0],
          [1, 0, 0]],
    "g": [[0, 1, 1],
          [1, 0, 0],
          [1, 0, 1],
          [1, 0, 1],
          [0, 1, 1]],
    "h": [[1, 0, 1],
          [1, 0, 1],
          [1, 1, 1],
          [1, 0, 1],
          [1, 0, 1]],
    "i": [[1, 1, 1],
          [0, 1, 0],
          [0, 1, 0],
          [0, 1, 0],
          [1, 1, 1]],
    "j": [[0, 0, 1],
          [0, 0, 1],
          [0, 0, 1],
          [1, 0, 1],
          [1, 1, 1]],
    "k": [[1, 0, 1],
          [1, 0, 1],
          [1, 1, 0],
          [1, 0, 1],
          [1, 0, 1]],
    "l": [[1, 0, 0],
          [1, 0, 0],
          [1, 0, 0],
          [1, 0, 0],
          [1, 1, 1]],
    "m": [[1, 0, 1],
          [1, 1, 1],
          [1, 1, 1],
          [1, 0, 1],
          [1, 0, 1]],
    "n": [[1, 1, 0],
          [1, 0, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 0, 1]],
    "o": [[1, 1, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 1, 1]],
    "p": [[1, 1, 0],
          [1, 0, 1],
          [1, 1, 0],
          [1, 0, 0],
          [1, 0, 0]],
    "q": [[1, 1, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 1, 1],
          [0, 1, 1]],
    "r": [[1, 1, 0],
          [1, 0, 1],
          [1, 1, 0],
          [1, 0, 1],
          [1, 0, 1]],
    "s": [[0, 1, 1],
          [1, 0, 0],
          [0, 1, 0],
          [0, 0, 1],
          [1, 1, 0]],
    "t": [[1, 1, 1],
          [0, 1, 0],
          [0, 1, 0],
          [0, 1, 0],
          [0, 1, 0]],
    "u": [[1, 0, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 1, 1]],
    "v": [[1, 0, 1],
          [1, 0, 1],
          [1, 0, 1],
          [0, 1, 0],
          [0, 1, 0]],
    "w": [[1, 0, 1],
          [1, 0, 1],
          [1, 0, 1],
          [1, 1, 1],
          [1, 0, 1]],
    "x": [[1, 0, 1],
          [1, 0, 1],
          [0, 1, 0],
          [1, 0, 1],
          [1, 0, 1]],
    "y": [[1, 0, 1],
          [1, 0, 1],
          [0, 1, 0],
          [0, 1, 0],
          [0, 1, 0]],
    "z": [[1, 1, 1],
          [0, 0, 1],
          [0, 1, 0],
          [1, 0, 0],
          [1, 1, 1]],
    " ": [[],
          [],
          [],
          [],
          []],
}

UPPER_MATRICES.update([(key.lower(), UPPER_MATRICES[key]) for key in UPPER_MATRICES.keys()])  # Case safety and read efficiency
LOWER_MATRICES.update([(key.upper(), LOWER_MATRICES[key]) for key in LOWER_MATRICES.keys()])  # Case safety and read efficiency


# Functions
def characterWidth(char: str, is_lower: bool):
    return len((UPPER_MATRICES if not is_lower else LOWER_MATRICES).get(char, [[]])[0])


def charstringWidth(charstring: str, is_lower: bool):
    width = 0
    for char in charstring[:-1]:
        width += characterWidth(char, is_lower) + 1
    width += characterWidth(charstring[-1:], is_lower)
    return width
